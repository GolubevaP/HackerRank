// https://www.hackerrank.com/challenges/sherlock-and-anagrams/

#include <bits/stdc++.h>

using namespace std;

list<string> getAllSubstrings(string str) {
    
    list<string> result;

    auto str_size = str.size();
    // заполняем переменную всеми возможными подстроками строки str
    for (auto i = 0; i < str_size; i++) 
    {
        for (auto j = 0; j < str_size - i; j++) 
        {
            // создаем переменную для подстроки, соответствующего размера
            string sub_str(i+1, '0');
            // копируем из str подстроку в sub_str
            copy((str.begin() + j), (str.begin() + j + i + 1), sub_str.begin());
            // сортируем полученную подстроку
            sort(sub_str.begin(), sub_str.end());
            // вставляем ее в список result
            result.push_back(sub_str);
        }
    }
    return result;
}

int sherlockAndAnagrams(string s)
{
    int count = 0;

    list<string> subStrings;
    // составляем все возможные подстроки
    subStrings = getAllSubstrings(s);

    // проверяем все подстроки из полученного списка
    for (auto it_sample = subStrings.begin(); it_sample != prev(subStrings.end()); ++it_sample)
    {
        for (auto it_substr = next(it_sample); it_substr != subStrings.end(); ++it_substr)
        {
            // если подстроки одного размера 
            if ((*it_sample).size() == (*it_substr).size())
            {
                // сравниваем их
                if (*it_sample == *it_substr) count++;
            }
            // иначе, выходим из внутреннего цикла
            else
            {
                break;
            }
        }
    }

    return count;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = sherlockAndAnagrams(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
