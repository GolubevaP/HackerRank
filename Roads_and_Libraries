// https://www.hackerrank.com/challenges/torque-and-development/problem

#include <bits/stdc++.h>

using namespace std;

void deep_first_search(long city, long &roads, vector<bool> &checked_cities, map<long,vector<long>> &cities, bool flag = false)
{
    // добавляем дорогу
    if (!flag)
    {
        roads++;
    }
    
    // отмечаем "посещение текущего город city"
    checked_cities[city - 1] = true;

    // проходим по списку дорог для текущего города
    int city_roads = cities[city].size();
    for(int i = 0; i < city_roads; ++i)
    {
        long next_city = cities[city][i];
        // если дорога соединяет текущий город с еще "непосещенным"
        if(!checked_cities[next_city - 1])
        {
            // проверяем дороги для следующего связанного города
            deep_first_search(next_city, roads, checked_cities, cities);
        }
    }
}

// Complete the roadsAndLibraries function below.
long roads_and_libraries(long n, long c_lib, long c_road, map<long,vector<long>> &cities)
{
    // если библиотеки стоят дешевле дорог 
    if (c_lib <= c_road)
    {
        // строим в каждом городе по библиотеке и не тратимся на восстановление дорог
        return n * c_lib;
    }
    else
    {
        // список городов - все "непосещенные" в начале
        vector<bool> checked_cities(n, false);
        
        // дороги и библиотеки
        long roads = 0; 
        long libs = 0;

        // "посетим" все города с проверкой
        for (int i = 1; i <= n; ++i)
        {
            // если город еще не "посещали"
            if (!checked_cities[i - 1])
            {
                libs++;
                deep_first_search(i, roads, checked_cities, cities, true);
            }
        }
        // считаем стоимость всех дорог и библиотек
        return (libs * c_lib + roads * c_road);
    }
}

int main()
{
    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    map<long,vector<long>> cities;
    long n, m, c_lib, c_road;
    
    for (int q_itr = 0; q_itr < q; q_itr++) 
    {

        cin >> n >> m >> c_lib >> c_road;

        cities.clear();

        for(int  i = 0; i < m; ++i){
            long u,v;
            cin >> u >> v;
            cities[u].push_back(v);
            cities[v].push_back(u);

            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        long result = roads_and_libraries(n, c_lib, c_road, cities);

        cout << result << endl;
    }

    return 0;
}
